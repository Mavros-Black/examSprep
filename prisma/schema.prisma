// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  TRIAL
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  MATCHING
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SectionType {
  HEADING
  PARAGRAPH
  LIST
  TABLE
  IMAGE
  EQUATION
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(STUDENT)
  avatar        String?
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  attempts      Attempt[]
  subscriptions Subscription[]
  createdDocuments Document[] @relation("DocumentCreator")
  createdQuestions Question[] @relation("QuestionCreator")

  @@map("users")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  fileUrl     String?
  fileType    String?
  fileSize    Int?
  subject     String
  tags        String[]
  isPublic    Boolean  @default(false)
  processingStatus ProcessingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId   String
  creator     User     @relation("DocumentCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    Attempt[]
  sections    DocumentSection[]

  @@map("documents")
}

model Question {
  id          String       @id @default(cuid())
  text        String
  type        QuestionType
  options     String[]     // For multiple choice questions
  correctAnswer String
  explanation String?
  difficulty  Int          @default(1) // 1-5 scale
  points      Int          @default(1)
  subject     String
  tags        String[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  documentId  String?
  document    Document?    @relation(fields: [documentId], references: [id], onDelete: SetNull)
  creatorId   String
  creator     User         @relation("QuestionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attempts    Attempt[]

  @@map("questions")
}

model Attempt {
  id          String        @id @default(cuid())
  score       Float?
  maxScore    Float
  timeSpent   Int           // in seconds
  status      AttemptStatus @default(IN_PROGRESS)
  answers     Json          // Store user answers
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String?
  document    Document?     @relation(fields: [documentId], references: [id], onDelete: SetNull)
  questions   Question[]

  @@map("attempts")
}

model Subscription {
  id          String             @id @default(cuid())
  planName    String
  status      SubscriptionStatus @default(TRIAL)
  startDate   DateTime           @default(now())
  endDate     DateTime?
  price       Float?
  features    String[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model DocumentSection {
  id          String       @id @default(cuid())
  documentId  String
  document    Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  type        SectionType
  content     String
  order       Int
  metadata    Json?        // Store additional metadata like confidence scores, bounding boxes, etc.
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("document_sections")
}
